<?php

namespace IB\PlatformBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
	public function getAdvertWithCategories(array $categoryNames)
	{
		$qb = $this->createQueryBuilder('a');

    	// On fait une jointure avec l'entité Category avec pour alias « c »
    	$qb
     	 ->innerJoin('a.categories', 'c')
      	->addSelect('c');

    	// Puis on filtre sur le nom des catégories à l'aide d'un IN
    	$qb->where($qb->expr()->in('c.name', $categoryNames));
    	// La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

    	// Enfin, on retourne le résultat
   	 return $qb
      	->getQuery()
      	->getResult();
	}

	public function getAdverts($page, $nbPerPage)
  	{
    	$query = $this->createQueryBuilder('a')
    		->leftJoin('a.image','i')	// les images
    		->addSelect('i')
    		->leftJoin('a.categories','c')	// les catégories
    		->addSelect('c')
    		->leftJoin('a.advertskills','s') // les annonces et compétences
    		->addSelect('s')
    		->leftJoin('s.skill','k') // les compétences
    		->addSelect('k')
     	 	->orderBy('a.date', 'DESC')
      		->getQuery();

    	$query
      		// On définit l'annonce à partir de laquelle commencer la liste
      		->setFirstResult(($page-1) * $nbPerPage)
      		// Ainsi que le nombre d'annonce à afficher sur une page
      		->setMaxResults($nbPerPage);

    	// Enfin, on retourne l'objet Paginator correspondant à la requête construite
    	// (n'oubliez pas le use correspondant en début de fichier)
    	return new Paginator($query, true);
  	}
	
	


}
